/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                            \\\\\
///// level-locked spell scrolls                                 \\\\\
/////                                                            \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

// skip freedom scrolls to help post-kangaxx recovery
OUTER_SET freedom_num = IDS_OF_SYMBOL (~spell~ ~WIZARD_FREEDOM~) - 2000
ACTION_IF freedom_num > 0 BEGIN OUTER_SPRINT freedom ~spwi%freedom_num%~ END ELSE BEGIN OUTER_SPRINT freedom ~not_murica~ END

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  READ_SHORT 0x1c type
  READ_SHORT 0x24 level
  PATCH_IF ((type = 11) AND (level = 0)) BEGIN // scrolls w/o a min requirement already
    READ_LONG  0x64 abil_off ELSE 0
    READ_SHORT 0x68 abil_num ELSE 0
    READ_LONG  0x6a fx_off   ELSE 0
    FOR (index = 0 ; index < abil_num ; ++index) BEGIN
      READ_SHORT  (abil_off + 0x1e + (0x38 * index)) abil_fx_num
      READ_SHORT  (abil_off + 0x20 + (0x38 * index)) abil_fx_idx
      FOR (index2 = 0 ; index2 < abil_fx_num ; ++index2) BEGIN
        READ_SHORT (fx_off +        (0x30 * (abil_fx_idx + index2))) opcode
        PATCH_IF ((opcode = 146) OR (opcode = 148)) BEGIN // cast spell
          READ_ASCII (fx_off + 0x14 + (0x30 * (abil_fx_idx + index2))) spell
          PATCH_IF (("%spell%" STRING_COMPARE_REGEXP ~^[Ss][Pp][Ww][Ii][3-9][0-9][0-9]$~ = 0) OR
                    ("%spell%" STRING_COMPARE_REGEXP ~^[Ss][Pp][Pp][Rr][3-7][0-9][0-9]$~ = 0)) BEGIN // levels 1&2 usable by level 0/1, so no need for level requirements
            PATCH_IF ("%spell%" STRING_COMPARE_REGEXP ~^[Ss][Pp][Ww][Ii][3-9][0-9][0-9]$~ = 0) BEGIN SET level_break = 11 END ELSE BEGIN SET level_break = 13 END // account for extra level for priest 6>7 and wizard 5>6
            PATCH_IF ("%spell%" STRING_COMPARE_CASE "%freedom%" = 0) BEGIN // exclude freedom scrolls
              SET level = 0
            END ELSE BEGIN
              READ_BYTE  (fx_off + 0x18 + (0x30 * (abil_fx_idx + index2))) level
              SET level = ((level - 0x31) * 2) // 0x31 is ascii 1, 0x32 is ascii 2, etc. This basically uses a level one below the numerical value and then doubles it
              PATCH_IF level < level_break BEGIN
                SET level -= 1
              END
            END
          END
        END
      END
    END
    WRITE_SHORT 0x24 level // still 0 if no match found, otherwise new value
  END
  BUT_ONLY
