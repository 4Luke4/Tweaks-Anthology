/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////                                                  \\\\\
///// wear multiple protection items                   \\\\\
/////                                                  \\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\
/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\/////\\\\\

/////                                                  \\\\\
///// PnP restrictions                                 \\\\\
/////                                                  \\\\\

ACTION_CLEAR_ARRAY cd_pnp_check
ACTION_CLEAR_ARRAY cd_pnp_table
ACTION_CLEAR_ARRAY cd_pnp_charges

INCLUDE ~cdtweaks/lib/pnp_descripts.tpa~  // text replacement macros

// first, eliminate iwd items on list without AC bonuses
COPY_EXISTING ~itemexcl.2da~ ~override~
  REPLACE_TEXTUALLY ~^bootgr01[ %TAB%]+1[ %TAB%%LNL%%MNL%%WNL%]+~ ~~
  REPLACE_TEXTUALLY ~^shldrng[ %TAB%]+1[ %TAB%%LNL%%MNL%%WNL%]+~ ~~

ACTION_IF FILE_EXISTS ~weidu_external/cdtweaks/2da/cdpnp_final.2da~ BEGIN
  COPY ~weidu_external/cdtweaks/2da/cdpnp_final.2da~ ~weidu_external/cdtweaks/2da/cdpnp.2da~
END ELSE BEGIN
  COPY ~cdtweaks/2da/cdpnp.2da~ ~weidu_external/cdtweaks/2da/cdpnp.2da~
END

// lookup table
COPY ~weidu_external/cdtweaks/2da/cdpnp.2da~ ~weidu_external/cdtweaks/2da/cdpnp.2da~
  COUNT_2DA_ROWS 3 cd_count
  FOR (row = 0 ; row < cd_count ; ++row) BEGIN // skip header
    READ_2DA_ENTRY row 0 3 item
    TO_LOWER item
    SET $cd_pnppi("%item%") = 1
  END

COPY_EXISTING ~itemexcl.2da~ ~override~
  COUNT_2DA_ROWS 2 rows
  FOR (index = 0 ; index < rows ; ++index) BEGIN
    READ_2DA_ENTRY index 0 2 itemcheck
    TO_LOWER itemcheck
    PATCH_IF !VARIABLE_IS_SET $cd_pnppi("%itemcheck%") BEGIN
      DEFINE_ASSOCIATIVE_ARRAY cd_pnp_check BEGIN "%itemcheck%" => 0 END
    END
  END
  BUT_ONLY

ACTION_PHP_EACH cd_pnp_check AS item => foo BEGIN

  // don't bother if file isn't present or if it's already on the list
  ACTION_IF FILE_EXISTS_IN_GAME ~%item%.itm~ THEN BEGIN

    COPY_EXISTING ~%item%.itm~ ~override~
      READ_SHORT 0x1c type
      SET add = 0
      PATCH_IF (type != 2) BEGIN // don't care if armor
        READ_LONG  0x6a fx_off
        READ_SHORT 0x70 fx_num
        FOR (index2 = 0 ; index2 < fx_num ; ++index2) BEGIN
          READ_SHORT (fx_off + (0x30 * index2)) opcode
          PATCH_IF (opcode = 0) BEGIN
            SET add = 1
            SET index2 = fx_num // kill loop
          END
        END
      END
      BUT_ONLY

    ACTION_IF (add = 1) BEGIN

      OUTER_SET cd_count += 1
      APPEND_OUTER ~weidu_external/cdtweaks/2da/cdpnp.2da~ ~%SOURCE_RES%  cdpp%cd_count%  c!pp%cd_count%~

    END

  END

END

COPY ~weidu_external/cdtweaks/2da/cdpnp.2da~ ~weidu_external/cdtweaks/2da/cdpnp.2da~
  COUNT_2DA_ROWS 3 rows
  FOR (index = 0 ; index < rows ; ++index) BEGIN
    READ_2DA_ENTRY index 0 3 orig
    READ_2DA_ENTRY index 1 3 no_ac
    READ_2DA_ENTRY index 2 3 0_lore
    DEFINE_ASSOCIATIVE_ARRAY cd_pnp_table BEGIN "%no_ac%", "%0_lore%" => "%orig%" END
  END
  BUT_ONLY

ACTION_PHP_EACH cd_pnp_table AS params => orig BEGIN

  ACTION_IF FILE_EXISTS_IN_GAME ~%orig%.itm~ THEN BEGIN

    COPY_EXISTING ~%orig%.itm~ ~override~
      LPF ~FJ_SPL_ITM_REINDEX~ END
      READ_ASCII  0x3a bam (8)
      READ_SHORT  0x42 lore
      PATCH_IF (lore = 0) BEGIN
        SPRINT params_1 ~%orig%~ // if original has no lore, don't bother with a second new item
      END
      READ_SHORT  0x68 abil_num
      WRITE_SHORT 0x68 (abil_num + 1)
      READ_LONG   0x6a fx_off
      WRITE_LONG  0x6a (fx_off + 0x38)
      PATCH_IF (abil_num > 0) BEGIN
        READ_LONG   0x64 abil_off
        READ_SHORT (abil_off + 0x1e + ((abil_num - 1) * 0x38)) last_fx_num
        READ_SHORT (abil_off + 0x20 + ((abil_num - 1) * 0x38)) last_fx_idx
        SET new_fx = (last_fx_idx + last_fx_num)
      END ELSE BEGIN
        READ_SHORT  0x70 new_fx
      END
      // because create inventory item doesn't have a way to set charges, create new and delete current
      INSERT_BYTES   (fx_off +        (new_fx * 0x30)) 0x30 // new effect
        WRITE_SHORT  (fx_off +        (new_fx * 0x30)) 122  // create inventory item
        WRITE_BYTE   (fx_off + 0x02 + (new_fx * 0x30)) 1    // target: self
        WRITE_BYTE   (fx_off + 0x0c + (new_fx * 0x30)) 1    // instant/permanent till death
        WRITE_BYTE   (fx_off + 0x12 + (new_fx * 0x30)) 100  // probability
        WRITE_ASCIIE (fx_off + 0x14 + (new_fx * 0x30)) ~%params_0%~ #8
      INSERT_BYTES   (fx_off       ) 0x38         // new ability
        WRITE_BYTE   (fx_off       ) 3            // magical
        WRITE_BYTE   (fx_off + 0x01) 1            // ID to use
        WRITE_SHORT  (fx_off + 0x02) 3            // in item slots
        WRITE_ASCIIE (fx_off + 0x04) ~%bam%~ #8   // item bam
        WRITE_SHORT  (fx_off + 0x0c) 5            // target: caster
        WRITE_SHORT  (fx_off + 0x0e) 1            // range: 1
        WRITE_SHORT  (fx_off + 0x1e) 1            // num effects: 1
        WRITE_SHORT  (fx_off + 0x20) new_fx       // fx index
        WRITE_SHORT  (fx_off + 0x22) 1            // num charges
        WRITE_BYTE   (fx_off + 0x24) 1            // vanishes when drained
        WRITE_LONG   (fx_off + 0x26) BIT11        // recharge after resting
        WRITE_SHORT  (fx_off + 0x2a) 1            // projectile: none
      BUT_ONLY

    ACTION_IF (lore != 0) BEGIN

      APPEND ~itemexcl.2da~ ~%params_1% 1~

    END

    ACTION_IF (abil_num < 3) BEGIN // don't bother if new ability is #4 (charges only for first 3 abils)

      ACTION_DEFINE_ASSOCIATIVE_ARRAY cd_pnp_charges BEGIN "%orig%" => "%abil_num%" END

    END

    COPY_EXISTING ~%orig%.itm~ ~override/%params_0%.itm~
                  ~%orig%.itm~ ~override/%params_1%.itm~
      WRITE_SHORT 0x42 0 // no lore

    COPY_EXISTING ~%params_0%.itm~ ~override~
      WRITE_ASCIIE (fx_off + 0x4c + (new_fx * 0x30)) ~%params_1%~ #8 // exploit the fact that fx_off and new_fx carry over
      LPF DELETE_ITEM_EQEFFECT INT_VAR opcode_to_delete = 0 END
      // update descriptions
      PATCH_FOR_EACH offset IN 0x50 0x54 BEGIN
        READ_STRREF ~%offset%~ desc
        PATCH_IF ("%desc%" STRING_COMPARE_REGEXP ~<Invalid Strref -?[0-9]+>~) BEGIN // checking for valid content in string
          INNER_PATCH_SAVE desc ~%desc%~ BEGIN
            LAUNCH_PATCH_MACRO ~pnp_descripts~
          END
          SAY_EVALUATED ~%offset%~ ~%desc%~ // write changes
        END
      END

  END

END

// add charges to items in game
COPY_EXISTING_REGEXP GLOB ~^.+\.[ac]re$~ ~override~
  PATCH_IF ("%SOURCE_FILE%" STRING_COMPARE_REGEXP "^.+\.cre$" = 0) BEGIN // if creature
    PATCH_IF original_iwd BEGIN
      READ_LONG 0x324 itm_off ELSE 0
      READ_LONG 0x328 itm_num ELSE 0
    END ELSE BEGIN
      READ_LONG 0x2bc itm_off ELSE 0
      READ_LONG 0x2c0 itm_num ELSE 0
    END
  END ELSE BEGIN
    READ_LONG  0x78 itm_off ELSE 0
    READ_SHORT 0x76 itm_num ELSE 0
  END
  FOR (index = 0 ; index < itm_num ; ++index) BEGIN
    READ_ASCII (itm_off +        (0x14 * index)) item ELSE ""
    PHP_EACH cd_pnp_charges AS itemname => charge BEGIN
      PATCH_IF ("%item%" STRING_COMPARE_CASE "%itemname%" = 0) BEGIN
        WRITE_SHORT (itm_off + 0x0a + (charge * 0x02) + (0x14 * index)) 1 // add charge
      END
    END
  END
  BUT_ONLY

// add charges to items being sold
COPY_EXISTING_REGEXP GLOB ~^.+\.sto$~ ~override~
  READ_LONG 0x34 sale_off  ELSE 0
  READ_LONG 0x38 sale_num  ELSE 0
  FOR (index = 0 ; index < sale_num ; ++index) BEGIN
    READ_ASCII (sale_off +        (index * 0x1c)) item
    PHP_EACH cd_pnp_charges AS itemname => charge BEGIN
      PATCH_IF ("%item%" STRING_COMPARE_CASE "%itemname%" = 0) BEGIN
        WRITE_SHORT (sale_off + 0x0a + (charge * 0x02) + (0x1c * index)) 1 // add charge
      END
    END
  END
  BUT_ONLY

// cespenar can use alternate items for upgrades
ACTION_IF FILE_EXISTS_IN_GAME botsmith.dlg THEN BEGIN

  COMPILE ~cdtweaks/dlg/cdpnp.d~

END

COPY + ~weidu_external/cdtweaks/2da/cdpnp.2da~ ~weidu_external/cdtweaks/2da/cdpnp_final.2da~
